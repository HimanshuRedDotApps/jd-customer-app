{"version":3,"sources":["views/app-views/operational-areas/add-new/index.js","../node_modules/antd/es/_util/styleChecker.js","../node_modules/rc-util/es/Dom/styleChecker.js","../node_modules/antd/es/_util/hooks/useFlexGapSupport.js"],"names":["AddNew","form","Form","useForm","status","setStatus","useState","history","useHistory","loading","setLoading","id","useParams","useEffect","async","response","axiosInstance","get","data","item","setFieldsValue","name","area_name","error","console","log","getData","_jsxs","className","children","_jsx","UserSwitchOutlined","style","color","fontWeight","Card","layout","onFinish","values","put","then","message","success","push","post","Item","label","rules","required","Input","Switch","checked","onChange","display","justifyContent","Button","marginRight","onClick","resetFields","type","htmlType","flexGapSupported","canUseDocElement","canUseDom","window","document","documentElement","detectFlexGapSupported","undefined","flex","createElement","flexDirection","rowGap","appendChild","body","scrollHeight","removeChild","isStyleNameSupport","styleName","styleNameList","Array","isArray","some","isStyleSupport","styleValue","value","ele","origin","isStyleValueSupport","_React$useState","React","_React$useState2","_slicedToArray","flexible","setFlexible"],"mappings":"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","file":"static/js/14.05b6e151.chunk.js","sourcesContent":["import { UserSwitchOutlined } from '@ant-design/icons'\r\nimport { Button, Card, Form, Input, message, Switch } from 'antd'\r\nimport { axiosInstance } from 'App';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom/cjs/react-router-dom';\r\n\r\n\r\nfunction AddNew() {\r\n    const [form] = Form.useForm();\r\n    const [status, setStatus] = useState(true);\r\n    const history = useHistory();\r\n    const [loading, setLoading] = useState(false);\r\n    const { id } = useParams();\r\n\r\n    const onFinish = (values) => {\r\n        setLoading(true);\r\n        if (id) {\r\n            try {\r\n                axiosInstance.put(`api/web/operational-area/${id}`, {\r\n                    area_name: values.name,\r\n                    status: status\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Updated Successfully\");\r\n                        history.push('/app/operator-master/operational-areas')\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                message.error(\"Something went wrong\");\r\n                setLoading(false);\r\n            }\r\n        } else {\r\n            try {\r\n                axiosInstance.post('api/web/operational-area', {\r\n                    area_name: values.name,\r\n                    status: status\r\n                }).then(response => {\r\n                    if (response.status === 200) {\r\n                        message.success(\"Added Successfully\");\r\n                        history.push('/app/operator-master/operational-areas')\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                message.error(\"Something went wrong\");\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const getData = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.get(`api/web/operational-area/${id}`);\r\n            if (response.status === 200) {\r\n                const data = response.data.item;\r\n                form.setFieldsValue({\r\n                    name: data.area_name,\r\n\r\n                })\r\n                setStatus(data.status);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (id) {\r\n            getData(id);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"customTableBackground\">\r\n            <h4> <UserSwitchOutlined /><span style={{\r\n                color: '#6a6a6a',\r\n                fontWeight: '300'\r\n            }}> Operational Mastrer / Area</span> / {\r\n                id ? \"Edit\" : \"Add New\"\r\n            } </h4>\r\n            <Card>\r\n                <Form form={form} layout=\"vertical\" name=\"userForm\" onFinish={onFinish} >\r\n\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        rules={[{ required: true, message: 'Please input name!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Status\"\r\n                    >\r\n                        <Switch checked={status}\r\n                            onChange={() => setStatus(!status)}\r\n                        />\r\n                    </Form.Item>\r\n                    <div style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\"\r\n                    }}>\r\n                        <Form.Item >\r\n                            <Button\r\n                                style={{ marginRight: 8 }}\r\n                                onClick={() => form.resetFields()}\r\n                            >\r\n                                Clear\r\n                            </Button>\r\n\r\n                            <Button\r\n                                loading={loading}\r\n                                type=\"primary\" htmlType=\"submit\">\r\n                                {/* Submit */}\r\n                                Save\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </div>\r\n                </Form>\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNew","import canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport { isStyleSupport } from \"rc-util/es/Dom/styleChecker\";\nexport var canUseDocElement = function canUseDocElement() {\n  return canUseDom() && window.document.documentElement;\n};\nexport { isStyleSupport };\nvar flexGapSupported;\nexport var detectFlexGapSupported = function detectFlexGapSupported() {\n  if (!canUseDocElement()) {\n    return false;\n  }\n\n  if (flexGapSupported !== undefined) {\n    return flexGapSupported;\n  } // create flex container with row-gap set\n\n\n  var flex = document.createElement('div');\n  flex.style.display = 'flex';\n  flex.style.flexDirection = 'column';\n  flex.style.rowGap = '1px'; // create two, elements inside it\n\n  flex.appendChild(document.createElement('div'));\n  flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)\n\n  document.body.appendChild(flex);\n  flexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap\n\n  document.body.removeChild(flex);\n  return flexGapSupported;\n};","import canUseDom from \"./canUseDom\";\nvar isStyleNameSupport = function isStyleNameSupport(styleName) {\n  if (canUseDom() && window.document.documentElement) {\n    var styleNameList = Array.isArray(styleName) ? styleName : [styleName];\n    var documentElement = window.document.documentElement;\n    return styleNameList.some(function (name) {\n      return name in documentElement.style;\n    });\n  }\n  return false;\n};\nvar isStyleValueSupport = function isStyleValueSupport(styleName, value) {\n  if (!isStyleNameSupport(styleName)) {\n    return false;\n  }\n  var ele = document.createElement('div');\n  var origin = ele.style[styleName];\n  ele.style[styleName] = value;\n  return ele.style[styleName] !== origin;\n};\nexport function isStyleSupport(styleName, styleValue) {\n  if (!Array.isArray(styleName) && styleValue !== undefined) {\n    return isStyleValueSupport(styleName, styleValue);\n  }\n  return isStyleNameSupport(styleName);\n}","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { detectFlexGapSupported } from '../styleChecker';\nexport default (function () {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      flexible = _React$useState2[0],\n      setFlexible = _React$useState2[1];\n\n  React.useEffect(function () {\n    setFlexible(detectFlexGapSupported());\n  }, []);\n  return flexible;\n});"],"sourceRoot":""}